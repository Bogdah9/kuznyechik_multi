{"version":3,"file":"index.min.js","mappings":"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","sources":["webpack://kuznyechik_multi/./src/browser_js/constants.mjs","webpack://kuznyechik_multi/./src/browser_js/functions.mjs","webpack://kuznyechik_multi/./src/browser_js/index.mjs"],"sourcesContent":["/**Матрица подстановок */\nexport const PI = Uint8Array.from([\n    0xfc, 0xee, 0xdd, 0x11, 0xcf, 0x6e, 0x31, 0x16, 0xfb, 0xc4, 0xfa, 0xda, 0x23, 0xc5, 0x04, 0x4d,\n    0xe9, 0x77, 0xf0, 0xdb, 0x93, 0x2e, 0x99, 0xba, 0x17, 0x36, 0xf1, 0xbb, 0x14, 0xcd, 0x5f, 0xc1,\n    0xf9, 0x18, 0x65, 0x5a, 0xe2, 0x5c, 0xef, 0x21, 0x81, 0x1c, 0x3c, 0x42, 0x8b, 0x01, 0x8e, 0x4f,\n    0x05, 0x84, 0x02, 0xae, 0xe3, 0x6a, 0x8f, 0xa0, 0x06, 0x0b, 0xed, 0x98, 0x7f, 0xd4, 0xd3, 0x1f,\n    0xeb, 0x34, 0x2c, 0x51, 0xea, 0xc8, 0x48, 0xab, 0xf2, 0x2a, 0x68, 0xa2, 0xfd, 0x3a, 0xce, 0xcc,\n    0xb5, 0x70, 0x0e, 0x56, 0x08, 0x0c, 0x76, 0x12, 0xbf, 0x72, 0x13, 0x47, 0x9c, 0xb7, 0x5d, 0x87,\n    0x15, 0xa1, 0x96, 0x29, 0x10, 0x7b, 0x9a, 0xc7, 0xf3, 0x91, 0x78, 0x6f, 0x9d, 0x9e, 0xb2, 0xb1,\n    0x32, 0x75, 0x19, 0x3d, 0xff, 0x35, 0x8a, 0x7e, 0x6d, 0x54, 0xc6, 0x80, 0xc3, 0xbd, 0x0d, 0x57,\n    0xdf, 0xf5, 0x24, 0xa9, 0x3e, 0xa8, 0x43, 0xc9, 0xd7, 0x79, 0xd6, 0xf6, 0x7c, 0x22, 0xb9, 0x03,\n    0xe0, 0x0f, 0xec, 0xde, 0x7a, 0x94, 0xb0, 0xbc, 0xdc, 0xe8, 0x28, 0x50, 0x4e, 0x33, 0x0a, 0x4a,\n    0xa7, 0x97, 0x60, 0x73, 0x1e, 0x00, 0x62, 0x44, 0x1a, 0xb8, 0x38, 0x82, 0x64, 0x9f, 0x26, 0x41,\n    0xad, 0x45, 0x46, 0x92, 0x27, 0x5e, 0x55, 0x2f, 0x8c, 0xa3, 0xa5, 0x7d, 0x69, 0xd5, 0x95, 0x3b,\n    0x07, 0x58, 0xb3, 0x40, 0x86, 0xac, 0x1d, 0xf7, 0x30, 0x37, 0x6b, 0xe4, 0x88, 0xd9, 0xe7, 0x89,\n    0xe1, 0x1b, 0x83, 0x49, 0x4c, 0x3f, 0xf8, 0xfe, 0x8d, 0x53, 0xaa, 0x90, 0xca, 0xd8, 0x85, 0x61,\n    0x20, 0x71, 0x67, 0xa4, 0x2d, 0x2b, 0x09, 0x5b, 0xcb, 0x9b, 0x25, 0xd0, 0xbe, 0xe5, 0x6c, 0x52,\n    0x59, 0xa6, 0x74, 0xd2, 0xe6, 0xf4, 0xb4, 0xc0, 0xd1, 0x66, 0xaf, 0xc2, 0x39, 0x4b, 0x63, 0xb6,\n]);\n/**Обратная матрица подстановок */\nexport const REVERCE_PI = Uint8Array.from([\n    0xa5, 0x2d, 0x32, 0x8f, 0x0e, 0x30, 0x38, 0xc0, 0x54, 0xe6, 0x9e, 0x39, 0x55, 0x7e, 0x52, 0x91,\n    0x64, 0x03, 0x57, 0x5a, 0x1c, 0x60, 0x07, 0x18, 0x21, 0x72, 0xa8, 0xd1, 0x29, 0xc6, 0xa4, 0x3f,\n    0xe0, 0x27, 0x8d, 0x0c, 0x82, 0xea, 0xae, 0xb4, 0x9a, 0x63, 0x49, 0xe5, 0x42, 0xe4, 0x15, 0xb7,\n    0xc8, 0x06, 0x70, 0x9d, 0x41, 0x75, 0x19, 0xc9, 0xaa, 0xfc, 0x4d, 0xbf, 0x2a, 0x73, 0x84, 0xd5,\n    0xc3, 0xaf, 0x2b, 0x86, 0xa7, 0xb1, 0xb2, 0x5b, 0x46, 0xd3, 0x9f, 0xfd, 0xd4, 0x0f, 0x9c, 0x2f,\n    0x9b, 0x43, 0xef, 0xd9, 0x79, 0xb6, 0x53, 0x7f, 0xc1, 0xf0, 0x23, 0xe7, 0x25, 0x5e, 0xb5, 0x1e,\n    0xa2, 0xdf, 0xa6, 0xfe, 0xac, 0x22, 0xf9, 0xe2, 0x4a, 0xbc, 0x35, 0xca, 0xee, 0x78, 0x05, 0x6b,\n    0x51, 0xe1, 0x59, 0xa3, 0xf2, 0x71, 0x56, 0x11, 0x6a, 0x89, 0x94, 0x65, 0x8c, 0xbb, 0x77, 0x3c,\n    0x7b, 0x28, 0xab, 0xd2, 0x31, 0xde, 0xc4, 0x5f, 0xcc, 0xcf, 0x76, 0x2c, 0xb8, 0xd8, 0x2e, 0x36,\n    0xdb, 0x69, 0xb3, 0x14, 0x95, 0xbe, 0x62, 0xa1, 0x3b, 0x16, 0x66, 0xe9, 0x5c, 0x6c, 0x6d, 0xad,\n    0x37, 0x61, 0x4b, 0xb9, 0xe3, 0xba, 0xf1, 0xa0, 0x85, 0x83, 0xda, 0x47, 0xc5, 0xb0, 0x33, 0xfa,\n    0x96, 0x6f, 0x6e, 0xc2, 0xf6, 0x50, 0xff, 0x5d, 0xa9, 0x8e, 0x17, 0x1b, 0x97, 0x7d, 0xec, 0x58,\n    0xf7, 0x1f, 0xfb, 0x7c, 0x09, 0x0d, 0x7a, 0x67, 0x45, 0x87, 0xdc, 0xe8, 0x4f, 0x1d, 0x4e, 0x04,\n    0xeb, 0xf8, 0xf3, 0x3e, 0x3d, 0xbd, 0x8a, 0x88, 0xdd, 0xcd, 0x0b, 0x13, 0x98, 0x02, 0x93, 0x80,\n    0x90, 0xd0, 0x24, 0x34, 0xcb, 0xed, 0xf4, 0xce, 0x99, 0x10, 0x44, 0x40, 0x92, 0x3a, 0x01, 0x26,\n    0x12, 0x1a, 0x48, 0x68, 0xf5, 0x81, 0x8b, 0xc7, 0xd6, 0x20, 0x0a, 0x08, 0x00, 0x4c, 0xd7, 0x74,\n]);\n/** Массив нулей с длиной 16 */\nexport const ARR_16_ZEROS = Array.from({ length: 16 }).map(x => 0);\nexport const L_CONSTANT = Uint8Array.from([\n    0x94, 0x20, 0x85, 0x10, 0xC2, 0xC0, 0x01, 0xFB, 0x01, 0xC0, 0xC2, 0x10, 0x85, 0x20, 0x94, 0x01\n]);\n//# sourceMappingURL=constants.mjs.map","import { L_CONSTANT, PI, ARR_16_ZEROS } from \"./constants.mjs\";\nfunction concatUnti8Array(...args) {\n    let ret = new Uint8Array(args.reduce((acc, x) => acc + x.length, 0));\n    let offset = 0;\n    for (let bin of args) {\n        ret.set(bin, offset);\n        offset += bin.length;\n    }\n    return ret;\n}\n/**\n * Сложение/вычетание в поле Галуа эквивалент XOR\n *\n * XOR (исключающее или) для буферов, возвращает сам буфер\n */\nexport const XOR = (a, b) => {\n    if (a.length !== b.length)\n        throw \"XOR a.length !== b.length\";\n    return Uint8Array.from(a.map((x, i) => b[i] ^ x));\n};\n/**\n * Умножение в поле Галуа по модулю неприводимого многочлена x^{8}+x^{7}+x^{6}+x+1}\n */\nexport const GALOIS_MULT = (a, b) => {\n    let ret = 0;\n    let hiBbit = 0;\n    for (let i = 0; i < 8; i++) {\n        let _tmp = b & 1;\n        if (_tmp === 1)\n            ret ^= a;\n        hiBbit = a & 0x80;\n        a <<= 1;\n        if (hiBbit === 0x80)\n            a ^= 0x1c3; //0x1c3 = x^{8}+x^{7}+x^{6}+x+1} || 0xc3 =  x^{7}+x^{6}+x+1\n        b >>= 1;\n    }\n    return ret;\n};\n/**\n * S преобразование\n *\n * Операция замены байтов путем применения нелинейной биективного преобразования\n */\nexport const S_TRANSFORM = (buf) => {\n    let ret = Uint8Array.from(ARR_16_ZEROS.slice());\n    buf.forEach((x, i) => ret[i] = PI[x]);\n    return ret;\n};\n/**\n * R преобразование\n *\n * Умножение + сдвиг\n */\nexport const R_TRANFORM = (buf) => {\n    let ret = Uint8Array.from(buf);\n    let a15 = 0;\n    for (let i = 0; i < 16; i++)\n        a15 ^= GALOIS_MULT(buf[i], L_CONSTANT[i]);\n    for (let i = 15; i >= 1; i--)\n        ret[i] = buf[i - 1];\n    ret[0] = a15;\n    return ret;\n};\n/**\n * Обратное R преобразование\n */\nexport const REV_R_TRANSFORM = (buf) => {\n    let a0 = buf[0];\n    let ret = Uint8Array.from(ARR_16_ZEROS.slice());\n    for (let i = 0; i < 15; i++) {\n        ret[i] = buf[i + 1];\n        a0 ^= GALOIS_MULT(buf[i + 1], L_CONSTANT[i]);\n    }\n    ret[15] = a0;\n    return ret;\n};\n/**\n * Обратное S преобразование\n *\n * Обратная операция замены байтов путем применения нелинейной биективного преобразования\n */\nexport const REV_S_TRANSFORM = (buf) => {\n    let ret = Uint8Array.from(ARR_16_ZEROS.slice());\n    buf.forEach((x, i) => ret[i] = PI.indexOf(x));\n    return ret;\n};\n/**L (линейное) преобразование  */\nexport const L_TRANSFORM = (buf) => {\n    let ret = Uint8Array.from(buf);\n    for (let i = 0; i < 16; i++)\n        ret = R_TRANFORM(ret);\n    return ret;\n};\n/**Обратное L (линейное) преобразование  */\nexport const REV_L_TRANSFORM = (buf) => {\n    let ret = Uint8Array.from(buf);\n    for (let i = 0; i < 16; i++)\n        ret = REV_R_TRANSFORM(ret);\n    return ret;\n};\n/** Преобразования ячейки Фейстеля */\nexport const FEISTEL_NETWORK = (key1, key2, iterC) => {\n    let internal = XOR(key1, iterC);\n    internal = S_TRANSFORM(internal);\n    internal = L_TRANSFORM(internal);\n    return [XOR(internal, key2), key1];\n};\n/** Расчет раундовых ключей */\nexport const EXPAND_KEYS = (masterkey) => {\n    if (masterkey.length !== 32)\n        throw \"Ключ должен быть 32 байта или 256 бит\\n\" + \"Получил \" + masterkey.length + \" байт\";\n    let iterC = [];\n    let keyL = Uint8Array.from(ARR_16_ZEROS.slice());\n    let keyR = Uint8Array.from(ARR_16_ZEROS.slice());\n    for (let i = 0; i < masterkey.length; i++) {\n        let j = i % 16;\n        let m = Uint8Array.from(ARR_16_ZEROS.slice());\n        m[15] = i;\n        iterC.push(L_TRANSFORM(m));\n        if (i < 16)\n            keyL[j] = masterkey[j];\n        else\n            keyR[j] = masterkey[j];\n    }\n    let ret = [Uint8Array.from(keyR), Uint8Array.from(keyL)];\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 8; j++) {\n            let temp = FEISTEL_NETWORK(keyL, keyR, iterC[j + 8 * i]);\n            keyR = Uint8Array.from(temp[0]);\n            keyL = Uint8Array.from(temp[1]);\n        }\n        ret[2 * i + 2] = Uint8Array.from(keyL);\n        ret[2 * i + 3] = Uint8Array.from(keyR);\n    }\n    return ret;\n};\nfunction toBuffer(data) {\n    if (typeof data === 'string') {\n        if (/[^0123456789abcdef]/gi.test(data))\n            throw \"Строка не HEX\";\n        let arr = data.match(/.?./g);\n        if (!arr)\n            throw \"match errore FN toBuffer\";\n        return Uint8Array.from(arr.map(x => parseInt(x, 16)));\n    }\n    else\n        return data;\n}\nexport function ROUNDS_10(block, keys) {\n    let temp = Uint8Array.from(block);\n    for (let i = 0; i < 9; i++) {\n        temp = XOR(temp, keys[i]);\n        temp = S_TRANSFORM(temp);\n        temp = L_TRANSFORM(temp);\n    }\n    return XOR(temp, keys[9]);\n}\nexport function REV_ROUNDS_10(block, keys) {\n    let temp = XOR(block, keys[9]);\n    for (let i = 8; i >= 0; i--) {\n        temp = REV_L_TRANSFORM(temp);\n        temp = REV_S_TRANSFORM(temp);\n        temp = XOR(temp, keys[i]);\n    }\n    return temp;\n}\nexport const encrypt = (data, masterkey) => {\n    let keys = EXPAND_KEYS(toBuffer(masterkey));\n    let ret = [];\n    let block = [];\n    if (!!(data.length % 16))\n        data = concatUnti8Array(Uint8Array.from(Array.from({ length: 16 - data.length % 16 }).map(x => 0)), data);\n    for (let i = 0; i < data.length; i++) {\n        block.push(data[i]);\n        if (block.length === 16) {\n            ret.push(...ROUNDS_10(block, keys));\n            block = [];\n        }\n    }\n    if (block.length > 0)\n        ret.push(...ROUNDS_10(block, keys));\n    return Uint8Array.from(ret);\n};\nexport const encryptAsync = async (data, masterkey) => {\n    let keys = EXPAND_KEYS(toBuffer(masterkey));\n    if (!!(data.length % 16))\n        data = concatUnti8Array(Uint8Array.from(Array.from({ length: 16 - data.length % 16 }).map(x => 0)), data);\n    let MAX_ITER = data.length / 16;\n    let ArrPromise = [];\n    for (let i = 0; i < MAX_ITER; i++) {\n        ArrPromise.push(new Promise(function (resolve, reject) {\n            resolve(ROUNDS_10(Uint8Array.from(data.subarray(i * 16, (i + 1) * 16)), keys));\n        }));\n    }\n    return await Promise.all(ArrPromise).then(arr => concatUnti8Array(...arr));\n};\nconst FN_TRIM_START = (b) => {\n    let index = b.findIndex((v) => v !== 0);\n    if (~index)\n        return b.subarray(index, b.length);\n    return b;\n};\nexport const decryptAsync = async (data, masterkey, trimStart = true) => {\n    let keys = EXPAND_KEYS(toBuffer(masterkey));\n    if (!!(data.length % 16))\n        data = concatUnti8Array(Uint8Array.from(Array.from({ length: 16 - data.length % 16 }).map(x => 0)), data);\n    let MAX_ITER = data.length / 16;\n    let ArrPromise = [];\n    for (let i = 0; i < MAX_ITER; i++) {\n        ArrPromise.push(new Promise(function (resolve, reject) {\n            resolve(REV_ROUNDS_10(Uint8Array.from(data.subarray(i * 16, (i + 1) * 16)), keys));\n        }));\n    }\n    return trimStart ? FN_TRIM_START(await Promise.all(ArrPromise).then(arr => concatUnti8Array(...arr))) : await Promise.all(ArrPromise).then(arr => concatUnti8Array(...arr));\n};\nexport const decrypt = (data, masterkey, trimStart = true) => {\n    let keys = EXPAND_KEYS(toBuffer(masterkey));\n    let ret = [];\n    let block = [];\n    if (!!(data.length % 16))\n        data = concatUnti8Array(Uint8Array.from(Array.from({ length: 16 - data.length % 16 }).map(x => 0)), data);\n    for (let i = 0; i < data.length; i++) {\n        block.push(data[i]);\n        if (block.length === 16) {\n            ret.push(...REV_ROUNDS_10(block, keys));\n            block = [];\n        }\n    }\n    if (block.length !== 0)\n        ret.push(...REV_ROUNDS_10(block, keys));\n    return trimStart ? FN_TRIM_START(Uint8Array.from(ret)) : Uint8Array.from(ret);\n};\n//# sourceMappingURL=functions.mjs.map","import { encryptAsync, encrypt, decrypt, decryptAsync } from \"./functions.mjs\";\nexport default {\n    async: {\n        encrypt: encryptAsync,\n        decrypt: decryptAsync,\n    },\n    sync: {\n        encrypt: encrypt,\n        decrypt: decrypt\n    }\n};\n//# sourceMappingURL=index.mjs.map"],"names":["PI","Uint8Array","from","ARR_16_ZEROS","Array","length","map","x","L_CONSTANT","concatUnti8Array","args","ret","reduce","acc","offset","bin","set","XOR","a","b","i","GALOIS_MULT","hiBbit","S_TRANSFORM","buf","slice","forEach","R_TRANFORM","a15","REV_R_TRANSFORM","a0","REV_S_TRANSFORM","indexOf","L_TRANSFORM","REV_L_TRANSFORM","FEISTEL_NETWORK","key1","key2","iterC","internal","EXPAND_KEYS","masterkey","keyL","keyR","j","m","push","temp","toBuffer","data","test","arr","match","parseInt","ROUNDS_10","block","keys","REV_ROUNDS_10","FN_TRIM_START","index","findIndex","v","subarray","async","encrypt","MAX_ITER","ArrPromise","Promise","resolve","reject","all","then","decrypt","trimStart","sync"],"sourceRoot":""}